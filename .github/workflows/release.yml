name: Build & Release Electron App

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v0.1.0'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      # 플랫폼별 빌드 도구 설치
      - name: Install Linux dependencies (for node-pty)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 python3-distutils libdrm-dev libgbm-dev libnss3-dev libatk-bridge2.0-dev libxcomposite-dev libxdamage-dev libxrandr-dev libxss-dev libasound2-dev
          
      - name: Setup Python for macOS (fix distutils)
        if: runner.os == 'macOS'
        run: |
          python3 -m pip install --user setuptools
          
      - name: Setup MSBuild for Windows (for node-pty)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: 'latest'
          
      # npm 캐싱 (플랫폼별 조건부)
      - name: Get npm cache directory path (Unix)
        if: runner.os != 'Windows'
        id: npm-cache-dir-unix
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
        
      - name: Get npm cache directory path (Windows)
        if: runner.os == 'Windows'
        id: npm-cache-dir-windows
        run: echo "dir=$(npm config get cache)" >> $env:GITHUB_OUTPUT
        
      - name: Cache node_modules (Unix)
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir-unix.outputs.dir }}
          key: ${{ runner.os }}-node-v20-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-v20-
            
      - name: Cache node_modules (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir-windows.outputs.dir }}
          key: ${{ runner.os }}-node-v20-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-v20-
            
      - name: Install npm dependencies
        run: npm install
        
      # 네이티브 모듈 재빌드 (continue-on-error 제거!)
      - name: Rebuild native dependencies for Electron
        run: npx @electron/rebuild --force --module-dir .
        env:
          npm_config_msvs_version: '2022'
        
      - name: TypeScript check
        run: npm run typecheck
        
      - name: Build and package Electron app
        run: npm run build
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.zip
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.yml
            dist/*.blockmap

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-artifacts
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist-artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
name: Build & Release Electron App

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v0.1.0'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      # Python 설정 (node-gyp v9 호환용)
      - name: Setup Python setuptools
        run: |
          # node-gyp v9에서 distutils 대체용 setuptools 설치
          python3 -m pip install --user setuptools
          
      # npm 캐싱
      - name: Get npm cache directory path
        id: npm-cache-dir
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
        
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-v20-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-v20-
            
      - name: Install npm dependencies
        run: npm install
        
      # 네이티브 모듈 재빌드 (macOS 전용)
      - name: Rebuild native dependencies for Electron
        run: npx @electron/rebuild --force --module-dir .
        
      - name: TypeScript check
        run: npm run typecheck
        
      - name: Build and package Electron app
        run: npm run build
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.zip
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.yml
            dist/*.blockmap

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-artifacts
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist-artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}